<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>

<#@ assembly name="mscorlib.dll" #>
<#@ import namespace="System.Reflection" #>

<#@ import namespace="System.Collections.Generic"#>
<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Data.DataSetExtensions.dll" #>
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ include file="$(ProjectDir)DbHelper.ttinclude"  #>
<#@ include file="..\ModelAuto.ttinclude"  #>


<# 
	var tableName=config.ModuleCode+"BLL";
	var entity=config.ModuleCode+"Entity";
	var repository=config.ModuleCode+"Repository";
	var name=config.ModuleCode;
	var name_entity = config.ModuleCode.Substring(0, 1).ToLower() + config.ModuleCode.Substring(1)+"Entity";
	var cach = name + "Cache";
	var PreNameSpace = config.PreNameSpace;
	var NameSpace = config.NameSpace;
 #>
 <#
		string solutionsPath = Host.ResolveAssemblyReference("$(SolutionDir)");
		string projectPath = Host.ResolveAssemblyReference("$(ProjectDir)");
		var path = Path.GetDirectoryName(Host.TemplateFile);
	var currentPath = "Busines@"+NameSpace;
	if(config.isFolder)
	{
		if(config.isAddProject)
		{
			path = solutionsPath+ config.PluginName +"\\Busines\\"+NameSpace;
			VSManagementStrategy vstrategy = new VSManagementStrategy(Host,currentPath);
			vstrategy.CreateFolderFromPath();//创建目录
			
		}else
		{
			path = path+"\\Busines\\"+NameSpace;
		}
		
	}
	if (Directory.Exists(path) == false)//
	{
		Directory.CreateDirectory(path);
	}
	//var projectPath_ = "D:\\Work\\WorkSpace\\CSharp\\vs2013\\JFineV3.0-JFGL\\Project\\JFineV3.0-JFGL\\JFine.Plugins.Credit\\Busines\\Credit";
	 var OutFileManager = new Manager(Host, GenerationEnvironment, true,currentPath) { OutputPath = path};
	 OutFileManager.strategy.setCurrentProjectItem();
 #>
 //开始输出每个文件
 <# 
        OutFileManager.StartBlock(tableName+".cs");
 #>

/********************************************************************************
**文 件 名:<#=tableName#>
**命名空间:<#=PreNameSpace#>.Busines.<#=NameSpace#>
**描    述:
**
**
**版 本 号:V1.0.0.0
**创 建 人:此代码由T4模板自动生成
**创建日期:<#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#>
**修 改 人:
**修改日期:
**修改描述:
**
**
**版权所有: ©为之团队
*********************************************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using <#=PreNameSpace#>.Domain.Models.<#=NameSpace#>;
using <#=PreNameSpace#>.Domain.IRepository.<#=NameSpace#>;
using <#=PreNameSpace#>.Domain.Repository.<#=NameSpace#>;
using JFine.Cache;
using JFine.Common.UI;
using JFine.Common.Extend;
using JFine.Common.Json;
using JFine.Data.Common;
using System.Linq.Expressions;
using System.Data.Common;
using System.Data;

namespace <#=PreNameSpace#>.Busines.<#=NameSpace#>
{	
	/// <summary>
	/// <#=tableName#>
	/// </summary>	
	public class <#=tableName#>
	{
	    private I<#=repository#> service=new <#=repository#>();

		/// <summary>
        /// 缓存key
        /// </summary>
        public string cacheKey ="<#=cach#>" ;

        #region 数据获取

        /// <summary>
        /// 列表
        /// </summary>
        /// <returns></returns>
        public IEnumerable<<#=entity#>> GetList()
        {
            return service.GetList();
        }

		/// <summary>
        /// 列表
        /// </summary>
        /// <returns></returns>
        public IEnumerable<<#=entity#>> GetListBySql( string sqlWhere)
        {
			return service.GetListBySql(sqlWhere);
        }

		/// <summary>
        /// 列表--分页
        /// </summary>
        /// <param name="pagination">分页</param>
        /// <param name="queryJson">查询参数</param>
        /// <returns></returns>
        public IEnumerable<<#=entity#>> GetPageListBySql(Pagination pagination, string queryJson)
        {
            var sqlWhere = new StringBuilder();
            var queryParam = queryJson.ToJObject();
			 List<DbParameter> parameter =  new List<DbParameter>();
            //查询条件
            if (!queryParam["keyword"].IsEmpty())
            {
                string keyword = queryParam["keyword"].ToString();
                sqlWhere.Append(" AND (Code like @keyword or Name like @keyword)");
				parameter.Add(DbParameters.CreateDbParameter("@keyword","%"+ keyword +"%",DbType.AnsiString));
            }
            
            return service.GetPageListBySql(pagination, sqlWhere.ToString(),parameter);
        }

		/// <summary>
        /// 列表
        /// </summary>
        /// <returns></returns>
        public IEnumerable<<#=entity#>> GetList( string queryJson)
        {
             var expression = LinqExtensions.True<<#=entity#>>();
            var queryParam = queryJson.ToJObject();
            //查询条件
            if (!queryParam["Name"].IsEmpty())
            {
                string name = queryParam["Name"].ToString();
                expression = expression.And(t => t.Name.Contains(name));
            }
			return service.GetList(expression);
        }

        /// <summary>
        /// 列表--分页
        /// </summary>
        /// <param name="pagination">分页</param>
        /// <param name="queryJson">查询参数</param>
        /// <returns></returns>
        public IEnumerable<<#=entity#>> GetPageList(Pagination pagination, string queryJson)
        {
			var expression = LinqExtensions.True<<#=entity#>>();
            var queryParam = queryJson.ToJObject();
             //查询条件
            if (!queryParam["keyword"].IsEmpty())
            {
                string keyord = queryParam["keyword"].ToString();
                expression = expression.And(t => t.Name.Contains(keyord));
            }
            return service.GetPageList(pagination, expression);
        }

        /// <summary>
        /// 实体
        /// </summary>
        /// <param name="keyValue">主键值</param>
        /// <returns></returns>
        public <#=entity#> GetForm(string keyValue)
        {
            return service.GetForm(keyValue);
        }
        #endregion

        #region 数据处理

        

        /// <summary>
        /// 保存数据
        /// </summary>
        /// <param name="keyValue">主键值</param>
        /// <param name="entity">实体</param>
        /// <returns></returns>
        public void SaveForm(string keyValue, <#=entity#> <#=name_entity#>)
        {
            try
            {
                service.SaveForm(keyValue, <#=name_entity#>);
                CacheFactory.Cache().WriteCache(cacheKey,<#=name_entity#>);
            }
            catch (Exception)
            {
                throw;
            }
        }

		/// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="keyValue">主键</param>
        public void DeleteForm(string keyValue)
        {
            try
            {
                service.DeleteForm(keyValue);
                CacheFactory.Cache().RemoveCache(cacheKey);
            }
            catch (Exception)
            {
                throw;
            }
        }

        #endregion

    }
}
<# OutFileManager.EndBlock(); #>
<# OutFileManager.Process(true); #>



