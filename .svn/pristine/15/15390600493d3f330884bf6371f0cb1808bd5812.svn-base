/********************************************************************************
**文 件 名:IOTDeviceRepository
**命名空间:JFine.Plugins.IOT.Busines.IOT
**描    述:
**
**
**版 本 号:V1.0.0.0
**创 建 人:此代码由T4模板自动生成
**创建日期:2019-07-01 14:26:08
**修 改 人:
**修改日期:
**修改描述:
**
**
**版权所有: ©为之团队
*********************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using JFine.Data;
using JFine.Plugins.IOT.Domain.Models.IOT;
using JFine.Data.Repository;
using JFine.Plugins.IOT.Domain.IRepository.IOT;
using JFine.Common.UI;
using JFine.Common.Extend;
using JFine.Common.Json;
using System.Data.Common;
using System.Linq.Expressions;
using System.Data;

namespace JFine.Plugins.IOT.Domain.Repository.IOT
{	
	/// <summary>
	/// IOTDeviceRepository
	/// </summary>	
	public class IOTDeviceRepository:RepositoryFactory<IOTDeviceEntity>, IIOTDeviceRepository
	{
		 #region 数据获取
        /// <summary>
        /// 列表
        /// </summary>
        /// <returns></returns>
        public IEnumerable<IOTDeviceEntity> GetList()
        {
            return this.BaseRepository().IQueryable().OrderByDescending(t => t.CreateDate).ToList();
        
		}

		/// <summary>
        /// 列表
        /// </summary>
        /// <returns></returns>
        public IEnumerable<IOTDeviceEntity> GetListBySql(string sqlWhere)
        {
            var strSql = new StringBuilder();
            strSql.Append(@"SELECT * 
                            FROM   IOT_Device
                            WHERE  1=1 ");
            strSql.Append(sqlWhere);
            return this.BaseRepository().FindList(strSql.ToString());
        
		}

		/// <summary>
        /// 列表-分页
        /// </summary>
        /// <param name="pagination">分页</param>
        /// <param name="sqlWhere">查询条件</param>
        /// <returns></returns>
        public IEnumerable<IOTDeviceEntity> GetPageListBySql(Pagination pagination, string sqlWhere, List<DbParameter> parameter)
        {

            var strSql = new StringBuilder();
            strSql.Append(@"SELECT * 
                            FROM   IOT_Device
                            WHERE  1=1 ");
            strSql.Append(sqlWhere);

            return this.BaseRepository().FindList(strSql.ToString(),parameter, pagination);

        }

		/// <summary>
        /// 列表
        /// </summary>
        /// <returns></returns>
        public IEnumerable<IOTDeviceEntity> GetList(Expression<Func<IOTDeviceEntity, bool>> condition)
        {
            return this.BaseRepository().IQueryable(condition).ToList();

        }


		/// <summary>
        /// 列表--分页
        /// </summary>
        /// <param name="pagination">分页</param>
        /// <param name="queryJson">查询参数</param>
        /// <returns></returns>
        public IEnumerable<IOTDeviceEntity> GetPageList(Pagination pagination, Expression<Func<IOTDeviceEntity, bool>> condition)
        {
            return this.BaseRepository().FindList(condition, pagination);
        }

         /// <summary>
        /// 获取设备当天产量
        /// </summary>
        /// <returns></returns>
        public DataTable GetDeviceDayQuantity() 
        {
            DateTime dt = DateTime.Now;
            StringBuilder sql = new StringBuilder();
            sql.Append(@"SELECT    DeviceCode ,
                                    COUNT(1) AS Quantity
                          FROM      IOT_DeviceBeat
                          WHERE     Year = ");
            sql.Append(dt.Year);
            sql.Append( " AND Month = ");
            sql.Append(dt.Month);
            sql.Append( " AND DAY = ");
            sql.Append(dt.Day);
            sql.Append( "  GROUP BY  DeviceCode ");
            return this.BaseRepository().FindTable(sql.ToString());
        }

        /// <summary>
        /// 实体
        /// </summary>
        /// <param name="keyValue">主键值</param>
        /// <returns></returns>
        public IOTDeviceEntity GetForm(string keyValue)
        {
            return this.BaseRepository().FindEntity(keyValue);
        }

         /// <summary>
        /// 实体
        /// </summary>
        /// <param name="code">code</param>
        /// <param name="key">key</param>
        /// <returns></returns>
        public IOTDeviceEntity GetForm(string code, string key)
        {
            return this.BaseRepository().FindEntity(t => t.Code.Equals(code) && t.SecretKey.Equals(key));
        }

        /// <summary>
        /// 实体
        /// </summary>
        /// <param name="keyValue">code</param>
        /// <returns></returns>
        public IOTDeviceEntity GetFormByCode(string code)
        {
            return this.BaseRepository().FindEntity(t => t.Code.Equals(code));
        }
        public DataTable GetDeviceOrder(string strWhere)
        {
           DataTable dt= new RepositoryFactory().BaseRepository().FindTable(@"select d1.*,d2.OrderNum,d2.ProductCode,d2.ProductName,d2.StandardBeat,d2.Quantity,d2.StartTime,d2.EndTime,isnull(d3.Quantity,0) as dayQuantity from dbo.IOT_Device d1 left join (select * from dbo.IOT_Order t where not exists(select 1 from dbo.IOT_Order where DeviceCode=t.DeviceCode and CreateDate>t.CreateDate))d2 on d1.Code=d2.DeviceCode left join (SELECT    DeviceCode ,
                                    COUNT(1) AS Quantity
                          FROM      IOT_DeviceBeat
                          WHERE     Year =year(getdate()) and Month=month(getdate()) and day=day(getdate()) group by  DeviceCode)d3 on d1.Code=d3.DeviceCode where 1=1 " + strWhere);
            return dt;
             
            
        }
        #endregion

        #region 数据处理

        /// <summary>
        /// 保存数据
        /// </summary>
        /// <param name="keyValue">主键值</param>
        /// <param name="iOTDeviceEntity">实体</param>
        /// <returns></returns>
        public void SaveForm(string keyValue, IOTDeviceEntity iOTDeviceEntity)
        {
            if (!string.IsNullOrEmpty(keyValue))
            {
                iOTDeviceEntity.Modify(keyValue);
                this.BaseRepository().Update(iOTDeviceEntity);
            }
            else
            {
                iOTDeviceEntity.Status = 1;
                iOTDeviceEntity.Create();
                this.BaseRepository().Insert(iOTDeviceEntity);
            }
        }

		/// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="keyValue">主键</param>
        public void DeleteForm(string keyValue)
        {
            this.BaseRepository().Delete(keyValue);
        }

        /// <summary>
        /// 更新状态
        /// </summary>
        /// <param name="deviceCode">设备编码</param>
        /// <param name="status">-1故障；0：马达关；1：马达开；</param>
        public void UpdateStatus(string deviceCode, int status)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append("UPDATE IOT_Device SET Status = ");
            sql.Append(status);
            sql.Append(" WHERE Code = '" + deviceCode + "'");
            this.BaseRepository().ExecuteBySql(sql.ToString());
        }

        #endregion
    }
}


