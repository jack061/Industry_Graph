/********************************************************************************
**文 件 名:IOTProductPlanController
**命名空间:JFine.Plugins.IOT.Busines.IOT
**描    述:
**
**
**版 本 号:V1.0.0.0
**创 建 人:此代码由T4模板自动生成
**创建日期:2019-08-06 14:34:15
**修 改 人:
**修改日期:
**修改描述:
**
**
**版权所有: ©为之团队
*********************************************************************************/
using JFine.Plugins.IOT.Busines.IOT;
using JFine.Common.UI;
using JFine.Common.Json;
using JFine.Plugins.IOT.Domain.Models.IOT;
using JFine.Web.Base.MVC.Handler;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Data;
using JFine.Common.Offices;
using JFine.Common.Data;
using System.Collections;
using JFine.Sequence;

namespace JFine.Plugins.IOT.Areas.IOT.Controllers
{	
	/// <summary>
	/// IOTProductPlanController
	/// </summary>	
	public class IOTProductPlanController:JFControllerBase
	{
		 private IOTProductPlanBLL iOTProductPlanBll = new IOTProductPlanBLL();

        #region View
        //
        // GET: /IOT/
        public override ActionResult Index()
        {
            return View("~/Plugins/JFine.IOT/Views/IOTProductPlan/Index.cshtml");
        }

        /// <summary>
        /// Form表单
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [HandlerAuthorize]
        public override ActionResult Form()
        {
            ViewBag.Id = Request["keyValue"];
            return View("~/Plugins/JFine.IOT/Views/IOTProductPlan/Form.cshtml");
        }

        #endregion

        #region 数据获取

		/// <summary>
        /// 列表 
        /// </summary>
        /// <param name="pagination">分页</param>
        /// <returns></returns>
		[HttpGet]
        [HandlerAjaxOnly]
        public ActionResult GetGridJson(Pagination pagination, string queryJson)
        {
            var data = new
            {
                rows = iOTProductPlanBll.GetPageList(pagination, queryJson),
                total = pagination.total,
                page = pagination.page,
                records = pagination.records
            };
            return Content(data.ToJson());
        }

        /// <summary>
        /// 功能实体 返回对象Json
        /// </summary>
        /// <param name="keyValue">主键值</param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult GetFormJson(string keyValue)
        {
            var data = iOTProductPlanBll.GetForm(keyValue);
            return Content(data.ToJson());
        }
        #endregion

        #region 数据处理
        

        /// <summary>
        /// 保存功能表单
        /// </summary>
        /// <param name="keyValue">主键值</param>
        /// <param name="IOTProductPlanEntity">功能实体</param>
        /// <returns></returns>
        [HttpPost]
        [HandlerAjaxOnly]
        [ValidateAntiForgeryToken]
        [ValidateInput(false)]
        public ActionResult SaveForm(string keyValue, IOTProductPlanEntity iOTProductPlanEntity)
        {
            iOTProductPlanBll.SaveForm(keyValue, iOTProductPlanEntity);
            return Success("保存成功。");
        }

		/// <summary>
        /// 删除功能
        /// </summary>
        /// <param name="keyValue">主键值</param>
        /// <returns></returns>
        [HttpPost]
        [HandlerAjaxOnly]
        [HandlerAuthorize]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteForm(string keyValue)
        {
            iOTProductPlanBll.DeleteForm(keyValue);
            return Success("删除成功。");
        }

        #endregion

        #region 上传文件数据

        /// <summary>
        /// 通过excel文件上传排产计划数据
        /// </summary>
        /// <returns></returns>
        public ActionResult Upload_plan_Excel()
        {
            Hashtable ht_result = new Hashtable();
            List<object> objs = new List<object>();

            string virPath = IOTConstant.FILE_PRODUCT_PLAN_URL + DateTime.Now.Day;
            ExcelHelper excel = new ExcelHelper();
            DataTable dt = excel.upExcelToDatatable(HttpContext, virPath, ref ht_result,1);
            if (DataTableHelper.IsExistRows(dt))
            {
                //判断工单号
                DataRow[] arrayDR = dt.Select("OrderNum is null or OrderNum='' ");
                if (arrayDR != null && arrayDR.Length > 0)
                {
                    return Error("导入失败，含有工单号为空的数据，请完善！");
                }
                //设备编码
                arrayDR = dt.Select("DeviceCode is null or DeviceCode='' ");
                if (arrayDR != null && arrayDR.Length > 0)
                {
                    return Error("导入失败，含有设备编码为空的数据，请完善！");
                }
                //模具编码
                arrayDR = dt.Select("MouldCode is null or MouldCode='' ");
                if (arrayDR != null && arrayDR.Length > 0)
                {
                    return Error("导入失败，含有模具编码为空的数据，请完善！");
                }
                
                List<IOTOrderEntity> orderList = new List<IOTOrderEntity>();
                //orderList = (List<IOTOrderEntity>)DataTableHelper.DataTableToIList<IOTOrderEntity>(dt);
                var json = dt.ToJson();
                orderList = JsonHelper.ToList<IOTOrderEntity>(json);
                

                IOTProductPlanEntity iOTProductPlanEntity = new IOTProductPlanEntity();
                iOTProductPlanEntity.Code = SequenceHelper.getRuleCode(IOTConstant.CODE_PRODUCT_PLAN);
                iOTProductPlanEntity.FileRUL = ht_result["path"].ToString();
                iOTProductPlanEntity.FileName = ht_result["fileName"].ToString();
                iOTProductPlanEntity.Quantity = orderList.Count();


                iOTProductPlanBll.SaveForm(iOTProductPlanEntity, orderList);
            }
            else
            {
                return Error("导入失败，请检查！");
            }
            return Success("导入成功。");
        }

        #endregion

    }
}

